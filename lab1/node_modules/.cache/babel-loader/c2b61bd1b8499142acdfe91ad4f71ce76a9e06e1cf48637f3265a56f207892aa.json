{"ast":null,"code":"const lowestLowercaseCode = 223;\nconst highestLowercaseCode = 255;\nconst lowestUppercaseCode = 191;\nconst highestUppercaseCode = 215;\nconst divisionSignCode = 247;\nconst multiplicationSignCode = 215;\nconst lettersInAlphabet = 26;\nfunction mod(number, value) {\n  number %= value;\n  if (number < 0) number += value;\n  return number;\n}\nfunction isLowercaseLatin(letter) {\n  let code = text.codePointAt(0);\n  if (code >= lowestLowercaseCode && code <= highestLowercaseCode && code != divisionSignCode) return true;\n  return false;\n}\nfunction isUppercaseLatin(letter) {\n  let code = text.codePointAt(0);\n  if (code >= lowestUppercaseCode && code <= highestUppercaseCode && code != multiplicationSignCode) return true;\n  return false;\n}\nfunction getLowercaseLetterNumber(letter) {\n  let code = text.codePointAt(0);\n  if (code > divisionSignCode) code--;\n  return code - lowestLowercaseCode;\n}\nfunction getUppercaseLetterNumber(letter) {\n  let code = text.codePointAt(0);\n  if (code > multiplicationSignCode) code--;\n  return code - lowestUppercaseCode;\n}\nfunction getLowercaseLetterByNumber(number) {\n  number += lowestLowercaseCode;\n  if (number >= divisionSignCode) number++;\n  return String.fromCodePoint(number);\n}\nfunction getUppercaseLetterByNumber(number) {\n  number += lowestUppercaseCode;\n  if (number >= multiplicationSignCode) number++;\n  return String.fromCodePoint(number);\n}\nfunction shiftLowercaseLatin(letter, shift) {\n  number = getLowercaseLetterNumber(letter);\n  number += shift;\n  number = mod(code, lettersInAlphabet);\n  return getLowercaseLetterByNumber(number);\n}\nfunction shiftUppercaseLatin(letter, shift) {\n  number = getUppercaseLetterNumber(letter);\n  number += shift;\n  number = mod(code, lettersInAlphabet);\n  return getUppercaseLetterByNumber(number);\n}\nfunction Compress(text, shift) {\n  let result = \"\";\n  for (const letter of text) {\n    if (isLowercaseLatin(letter)) {\n      result += shiftLowercaseLatin(letter, shift);\n    } else if (isUppercaseLatin(letter)) {\n      result += shiftUppercaseLatin(letter, shift);\n    } else {\n      result += letter;\n    }\n  }\n}\n_c = Compress;\nvar _c;\n$RefreshReg$(_c, \"Compress\");","map":{"version":3,"names":["lowestLowercaseCode","highestLowercaseCode","lowestUppercaseCode","highestUppercaseCode","divisionSignCode","multiplicationSignCode","lettersInAlphabet","mod","number","value","isLowercaseLatin","letter","code","text","codePointAt","isUppercaseLatin","getLowercaseLetterNumber","getUppercaseLetterNumber","getLowercaseLetterByNumber","String","fromCodePoint","getUppercaseLetterByNumber","shiftLowercaseLatin","shift","shiftUppercaseLatin","Compress","result","_c","$RefreshReg$"],"sources":["/home/Ma3yTuK/Labs/sem6/isob/lab1/src/logic/caesar.js"],"sourcesContent":["const lowestLowercaseCode = 223;\nconst highestLowercaseCode = 255;\nconst lowestUppercaseCode = 191;\nconst highestUppercaseCode = 215;\nconst divisionSignCode = 247;\nconst multiplicationSignCode = 215;\nconst lettersInAlphabet = 26;\n\nfunction mod(number, value)\n{\n    number %= value;\n    if (number < 0)\n        number += value;\n    return number;\n}\n\nfunction isLowercaseLatin(letter)\n{\n    let code = text.codePointAt(0);\n    if (code >= lowestLowercaseCode && code <= highestLowercaseCode && code != divisionSignCode)\n        return true;\n    return false;\n}\n\nfunction isUppercaseLatin(letter)\n{\n    let code = text.codePointAt(0);\n    if (code >= lowestUppercaseCode && code <= highestUppercaseCode && code != multiplicationSignCode)\n        return true;\n    return false;\n}\n\nfunction getLowercaseLetterNumber(letter)\n{\n    let code = text.codePointAt(0);\n\n    if (code > divisionSignCode)\n        code--;\n\n    return code - lowestLowercaseCode;\n}\n\nfunction getUppercaseLetterNumber(letter)\n{\n    let code = text.codePointAt(0);\n\n    if (code > multiplicationSignCode)\n        code--;\n\n    return code - lowestUppercaseCode;\n}\n\nfunction getLowercaseLetterByNumber(number)\n{\n    number += lowestLowercaseCode;\n\n    if (number >= divisionSignCode)\n        number++;\n\n    return String.fromCodePoint(number);\n}\n\nfunction getUppercaseLetterByNumber(number)\n{\n    number += lowestUppercaseCode;\n\n    if (number >= multiplicationSignCode)\n        number++;\n\n    return String.fromCodePoint(number);\n}\n\nfunction shiftLowercaseLatin(letter, shift)\n{\n    number = getLowercaseLetterNumber(letter);\n\n    number += shift;\n    number = mod(code, lettersInAlphabet);\n    \n    return getLowercaseLetterByNumber(number);\n}\n\nfunction shiftUppercaseLatin(letter, shift)\n{\n    number = getUppercaseLetterNumber(letter);\n\n    number += shift;\n    number = mod(code, lettersInAlphabet);\n    \n    return getUppercaseLetterByNumber(number);\n}\n\nfunction Compress(text, shift)\n{\n    let result = \"\";\n    for(const letter of text)\n    {\n        if (isLowercaseLatin(letter))\n        {\n            result += shiftLowercaseLatin(letter, shift);\n        }\n        else if (isUppercaseLatin(letter))\n        {\n            result += shiftUppercaseLatin(letter, shift);\n        }\n        else \n        {\n            result += letter;\n        }\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
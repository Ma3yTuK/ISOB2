{"ast":null,"code":"const lowestLowercaseCode = 223;\nconst highestLowercaseCode = 255;\nconst lowestUppercaseCode = 191;\nconst highestUppercaseCode = 215;\nconst divisionSignCode = 247;\nconst multiplicationSignCode = 215;\nconst lettersInAlphabet = 26;\nexport function mod(number, value) {\n  number %= value;\n  if (number < 0) number += value;\n  return number;\n}\nexport function isLowercaseLatin(letter) {\n  let code = letter.codePointAt(0);\n  if (code >= lowestLowercaseCode && code <= highestLowercaseCode && code != divisionSignCode) return true;\n  return false;\n}\nexport function isUppercaseLatin(letter) {\n  let code = letter.codePointAt(0);\n  if (code >= lowestUppercaseCode && code <= highestUppercaseCode && code != multiplicationSignCode) return true;\n  return false;\n}\nexport function getLowercaseLetterNumber(letter) {\n  let code = letter.codePointAt(0);\n  if (code > divisionSignCode) code--;\n  return code - lowestLowercaseCode;\n}\nexport function getUppercaseLetterNumber(letter) {\n  let code = letter.codePointAt(0);\n  if (code > multiplicationSignCode) code--;\n  return code - lowestUppercaseCode;\n}\nexport function getLowercaseLetterByNumber(number) {\n  number += lowestLowercaseCode;\n  if (number >= divisionSignCode) number++;\n  return String.fromCodePoint(number);\n}\nexport function getUppercaseLetterByNumber(number) {\n  number += lowestUppercaseCode;\n  if (number >= multiplicationSignCode) number++;\n  return String.fromCodePoint(number);\n}\nexport function shiftLowercaseLatin(letter, shift) {\n  let number = getLowercaseLetterNumber(letter);\n  number += shift;\n  number = mod(number, lettersInAlphabet);\n  return getLowercaseLetterByNumber(number);\n}\nexport function shiftUppercaseLatin(letter, shift) {\n  let number = getUppercaseLetterNumber(letter);\n  number += shift;\n  number = mod(number, lettersInAlphabet);\n  return getUppercaseLetterByNumber(number);\n}","map":{"version":3,"names":["lowestLowercaseCode","highestLowercaseCode","lowestUppercaseCode","highestUppercaseCode","divisionSignCode","multiplicationSignCode","lettersInAlphabet","mod","number","value","isLowercaseLatin","letter","code","codePointAt","isUppercaseLatin","getLowercaseLetterNumber","getUppercaseLetterNumber","getLowercaseLetterByNumber","String","fromCodePoint","getUppercaseLetterByNumber","shiftLowercaseLatin","shift","shiftUppercaseLatin"],"sources":["/home/Ma3yTuK/Labs/sem6/isob/lab1/src/logic/helper_functions.js"],"sourcesContent":["const lowestLowercaseCode = 223;\nconst highestLowercaseCode = 255;\nconst lowestUppercaseCode = 191;\nconst highestUppercaseCode = 215;\nconst divisionSignCode = 247;\nconst multiplicationSignCode = 215;\nconst lettersInAlphabet = 26;\n\nexport function mod(number, value)\n{\n    number %= value;\n    if (number < 0)\n        number += value;\n    return number;\n}\n\nexport function isLowercaseLatin(letter)\n{\n    let code = letter.codePointAt(0);\n    if (code >= lowestLowercaseCode && code <= highestLowercaseCode && code != divisionSignCode)\n        return true;\n    return false;\n}\n\nexport function isUppercaseLatin(letter)\n{\n    let code = letter.codePointAt(0);\n    if (code >= lowestUppercaseCode && code <= highestUppercaseCode && code != multiplicationSignCode)\n        return true;\n    return false;\n}\n\nexport function getLowercaseLetterNumber(letter)\n{\n    let code = letter.codePointAt(0);\n\n    if (code > divisionSignCode)\n        code--;\n\n    return code - lowestLowercaseCode;\n}\n\nexport function getUppercaseLetterNumber(letter)\n{\n    let code = letter.codePointAt(0);\n\n    if (code > multiplicationSignCode)\n        code--;\n\n    return code - lowestUppercaseCode;\n}\n\nexport function getLowercaseLetterByNumber(number)\n{\n    number += lowestLowercaseCode;\n\n    if (number >= divisionSignCode)\n        number++;\n\n    return String.fromCodePoint(number);\n}\n\nexport function getUppercaseLetterByNumber(number)\n{\n    number += lowestUppercaseCode;\n\n    if (number >= multiplicationSignCode)\n        number++;\n\n    return String.fromCodePoint(number);\n}\n\nexport function shiftLowercaseLatin(letter, shift)\n{\n    let number = getLowercaseLetterNumber(letter);\n\n    number += shift;\n    number = mod(number, lettersInAlphabet);\n    \n    return getLowercaseLetterByNumber(number);\n}\n\nexport function shiftUppercaseLatin(letter, shift)\n{\n    let number = getUppercaseLetterNumber(letter);\n\n    number += shift;\n    number = mod(number, lettersInAlphabet);\n    \n    return getUppercaseLetterByNumber(number);\n}"],"mappings":"AAAA,MAAMA,mBAAmB,GAAG,GAAG;AAC/B,MAAMC,oBAAoB,GAAG,GAAG;AAChC,MAAMC,mBAAmB,GAAG,GAAG;AAC/B,MAAMC,oBAAoB,GAAG,GAAG;AAChC,MAAMC,gBAAgB,GAAG,GAAG;AAC5B,MAAMC,sBAAsB,GAAG,GAAG;AAClC,MAAMC,iBAAiB,GAAG,EAAE;AAE5B,OAAO,SAASC,GAAGA,CAACC,MAAM,EAAEC,KAAK,EACjC;EACID,MAAM,IAAIC,KAAK;EACf,IAAID,MAAM,GAAG,CAAC,EACVA,MAAM,IAAIC,KAAK;EACnB,OAAOD,MAAM;AACjB;AAEA,OAAO,SAASE,gBAAgBA,CAACC,MAAM,EACvC;EACI,IAAIC,IAAI,GAAGD,MAAM,CAACE,WAAW,CAAC,CAAC,CAAC;EAChC,IAAID,IAAI,IAAIZ,mBAAmB,IAAIY,IAAI,IAAIX,oBAAoB,IAAIW,IAAI,IAAIR,gBAAgB,EACvF,OAAO,IAAI;EACf,OAAO,KAAK;AAChB;AAEA,OAAO,SAASU,gBAAgBA,CAACH,MAAM,EACvC;EACI,IAAIC,IAAI,GAAGD,MAAM,CAACE,WAAW,CAAC,CAAC,CAAC;EAChC,IAAID,IAAI,IAAIV,mBAAmB,IAAIU,IAAI,IAAIT,oBAAoB,IAAIS,IAAI,IAAIP,sBAAsB,EAC7F,OAAO,IAAI;EACf,OAAO,KAAK;AAChB;AAEA,OAAO,SAASU,wBAAwBA,CAACJ,MAAM,EAC/C;EACI,IAAIC,IAAI,GAAGD,MAAM,CAACE,WAAW,CAAC,CAAC,CAAC;EAEhC,IAAID,IAAI,GAAGR,gBAAgB,EACvBQ,IAAI,EAAE;EAEV,OAAOA,IAAI,GAAGZ,mBAAmB;AACrC;AAEA,OAAO,SAASgB,wBAAwBA,CAACL,MAAM,EAC/C;EACI,IAAIC,IAAI,GAAGD,MAAM,CAACE,WAAW,CAAC,CAAC,CAAC;EAEhC,IAAID,IAAI,GAAGP,sBAAsB,EAC7BO,IAAI,EAAE;EAEV,OAAOA,IAAI,GAAGV,mBAAmB;AACrC;AAEA,OAAO,SAASe,0BAA0BA,CAACT,MAAM,EACjD;EACIA,MAAM,IAAIR,mBAAmB;EAE7B,IAAIQ,MAAM,IAAIJ,gBAAgB,EAC1BI,MAAM,EAAE;EAEZ,OAAOU,MAAM,CAACC,aAAa,CAACX,MAAM,CAAC;AACvC;AAEA,OAAO,SAASY,0BAA0BA,CAACZ,MAAM,EACjD;EACIA,MAAM,IAAIN,mBAAmB;EAE7B,IAAIM,MAAM,IAAIH,sBAAsB,EAChCG,MAAM,EAAE;EAEZ,OAAOU,MAAM,CAACC,aAAa,CAACX,MAAM,CAAC;AACvC;AAEA,OAAO,SAASa,mBAAmBA,CAACV,MAAM,EAAEW,KAAK,EACjD;EACI,IAAId,MAAM,GAAGO,wBAAwB,CAACJ,MAAM,CAAC;EAE7CH,MAAM,IAAIc,KAAK;EACfd,MAAM,GAAGD,GAAG,CAACC,MAAM,EAAEF,iBAAiB,CAAC;EAEvC,OAAOW,0BAA0B,CAACT,MAAM,CAAC;AAC7C;AAEA,OAAO,SAASe,mBAAmBA,CAACZ,MAAM,EAAEW,KAAK,EACjD;EACI,IAAId,MAAM,GAAGQ,wBAAwB,CAACL,MAAM,CAAC;EAE7CH,MAAM,IAAIc,KAAK;EACfd,MAAM,GAAGD,GAAG,CAACC,MAAM,EAAEF,iBAAiB,CAAC;EAEvC,OAAOc,0BAA0B,CAACZ,MAAM,CAAC;AAC7C"},"metadata":{},"sourceType":"module","externalDependencies":[]}